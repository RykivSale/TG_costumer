from aiogram import Router, F
from aiogram.types import Message, InlineQuery, InlineQueryResultArticle, InputTextMessageContent, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from data.database import DataBase
from utils.states import CostumeRent, CostumeReturn, ReturnRequestAdmin
from keyboards.reply import user_menu, admin_menu, confirm_rent_kb
from uuid import uuid4
from sqlalchemy import select, or_, update, delete, join
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload
from data.models import Costumes, Cart, Users, ReturnRequest, Role
from datetime import datetime, timedelta

router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
async def get_role_menu(user_id: int, db: DataBase):
    user = await db.get(user_id)
    return admin_menu if user and user.role == Role.Admin else user_menu

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Å—Ç—é–º"
@router.message(F.text == "üì• –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Å—Ç—é–º")
async def get_costume_start(message: Message, state: FSMContext, db: DataBase):
    await state.set_state(CostumeRent.selecting)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="üîç –ò—Å–∫–∞—Ç—å –∫–æ—Å—Ç—é–º",
                switch_inline_query_current_chat=""
            )]
        ]
    )
    
    menu = await get_role_menu(message.from_user.id, db)
    
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∫–æ—Å—Ç—é–º–∞.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ø–æ:\n"
        "- –ù–∞–∑–≤–∞–Ω–∏—é –∫–æ—Å—Ç—é–º–∞\n"
        "- –†–∞–∑–º–µ—Ä—É (M, L, XL)\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline —Ä–µ–∂–∏–º–∞
@router.inline_query()
async def inline_search(query: InlineQuery, db: DataBase):
    search_text = query.query.lower().strip()
    results = []

    try:
        async with db.async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—Å—Ç—é–º—ã –∏–∑ –±–∞–∑—ã
            stmt = select(Costumes).where(
                Costumes.quantity > 0,
                or_(
                    Costumes.name.ilike(f"%{search_text}%"),
                    Costumes.size.ilike(f"%{search_text}%")
                )
            )
            result = await session.execute(stmt)
            costumes = result.scalars().all()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è inline —Ä–µ–∂–∏–º–∞
            for costume in costumes:
                results.append(
                    InlineQueryResultArticle(
                        id=str(costume.costume_uuid),
                        title=f"{costume.name} (–†–∞–∑–º–µ—Ä: {costume.size})",
                        description=f"–í –Ω–∞–ª–∏—á–∏–∏: {costume.quantity} —à—Ç.",
                        thumb_url=costume.image_url,
                        input_message_content=InputTextMessageContent(
                            message_text=f"COSTUME_UUID:{costume.costume_uuid}"
                        )
                    )
                )

    except Exception as e:
        print(f"Error in inline search: {e}")
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ",
                description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                input_message_content=InputTextMessageContent(
                    message_text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ—Å—Ç—é–º–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            )
        ]

    if not results:
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                input_message_content=InputTextMessageContent(
                    message_text="–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
                )
            )
        ]

    await query.answer(
        results=results,
        cache_time=5,
        is_personal=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ—Å—Ç—é–º–∞
@router.message(CostumeRent.selecting, F.text.startswith("COSTUME_UUID:"))
async def process_costume_selection(message: Message, state: FSMContext, db: DataBase):
    costume_uuid = message.text.split(":")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º UUID –∫–æ—Å—Ç—é–º–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(costume_uuid=costume_uuid)
    await state.set_state(CostumeRent.confirming)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Å—Ç—é–º–µ
    async with db.async_session() as session:
        stmt = select(Costumes).where(Costumes.costume_uuid == costume_uuid)
        result = await session.execute(stmt)
        costume = result.scalar_one_or_none()
        
        if costume:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å UUID
            await message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            menu = await get_role_menu(message.from_user.id, db)
            await message.answer(
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∫–æ—Å—Ç—é–º:\n"
                f"üé≠ <b>{costume.name}</b>\n"
                f"üìè –†–∞–∑–º–µ—Ä: {costume.size}\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?",
                reply_markup=confirm_rent_kb,
                parse_mode="HTML"
            )
        else:
            menu = await get_role_menu(message.from_user.id, db)
            await message.answer("–ö–æ—Å—Ç—é–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.", reply_markup=menu)
            await state.set_state(CostumeRent.selecting)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
@router.message(CostumeRent.confirming, F.text.in_(["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]))
async def process_rent_confirmation(message: Message, state: FSMContext, db: DataBase):
    if message.text == "‚ùå –ù–µ—Ç":
        menu = await get_role_menu(message.from_user.id, db)
        await message.answer("–û–∫–µ–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤—ã–±–æ—Ä!", reply_markup=menu)
        await state.set_state(CostumeRent.selecting)
        return

    # –ü–æ–ª—É—á–∞–µ–º UUID –∫–æ—Å—Ç—é–º–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    costume_uuid = data.get("costume_uuid")

    async with db.async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Å—Ç—é–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            stmt = select(Costumes).where(Costumes.costume_uuid == costume_uuid)
            result = await session.execute(stmt)
            costume = result.scalar_one_or_none()

            if not costume or costume.quantity <= 0:
                menu = await get_role_menu(message.from_user.id, db)
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –∫–æ—Å—Ç—é–º —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=menu)
                await state.clear()
                return

            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Å—Ç—é–º–æ–≤
            stmt = update(Costumes).where(
                Costumes.costume_uuid == costume_uuid,
                Costumes.quantity > 0
            ).values(
                quantity=Costumes.quantity - 1
            )
            await session.execute(stmt)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–æ—Ä–∑–∏–Ω–µ
            new_cart_item = Cart(
                user_id=message.from_user.id,
                costume_id=costume.id
            )
            session.add(new_cart_item)

            await session.commit()

            menu = await get_role_menu(message.from_user.id, db)
            await message.answer(
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ö–æ—Å—Ç—é–º {costume.name} —Ç–µ–ø–µ—Ä—å –≤–∞—à!\n"
                f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.",
                reply_markup=menu
            )

        except Exception as e:
            print(f"Error in rent confirmation: {e}")
            await session.rollback()
            menu = await get_role_menu(message.from_user.id, db)
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=menu
            )

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∫–æ—Å—Ç—é–º—ã"
@router.message(F.text == "üëî –ú–æ–∏ –∫–æ—Å—Ç—é–º—ã")
async def my_costumes(message: Message, db: DataBase):
    async with db.async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—Å—Ç—é–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Cart
            stmt = select(Costumes).join(Cart).where(
                Cart.user_id == message.from_user.id
            )
            result = await session.execute(stmt)
            costumes = result.scalars().all()

            menu = await get_role_menu(message.from_user.id, db)

            if not costumes:
                await message.answer(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Å—Ç—é–º–æ–≤. üì¶\n"
                    "–ß—Ç–æ–±—ã –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ—Å—Ç—é–º, –Ω–∞–∂–º–∏—Ç–µ 'üì• –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Å—Ç—é–º'.",
                    reply_markup=menu
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ—Å—Ç—é–º–æ–≤
            response = "üëî –í–∞—à–∏ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—Å—Ç—é–º—ã:\n\n"
            for costume in costumes:
                response += (
                    f"üé≠ <b>{costume.name}</b>\n"
                    f"üìè –†–∞–∑–º–µ—Ä: {costume.size}\n"
                    f"üñºÔ∏è –§–æ—Ç–æ: {costume.image_url}\n\n"
                )

            await message.answer(
                response,
                parse_mode="HTML",
                reply_markup=menu
            )

        except Exception as e:
            print(f"Error in my_costumes: {e}")
            menu = await get_role_menu(message.from_user.id, db)
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ—Å—Ç—é–º–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=menu
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–¥–∞—Ç—å –∫–æ—Å—Ç—é–º"
@router.message(F.text == "üì§ –°–¥–∞—Ç—å –∫–æ—Å—Ç—é–º")
async def return_costume_start(message: Message, state: FSMContext, db: DataBase):
    await state.set_state(CostumeReturn.select_costume)
    
    async with db.async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Å—Ç—é–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ—Ä–∑–∏–Ω–µ
        stmt = select(Costumes).join(Cart).where(
            Cart.user_id == message.from_user.id
        )
        result = await session.execute(stmt)
        costumes = result.scalars().all()

        menu = await get_role_menu(message.from_user.id, db)

        if not costumes:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—Å—Ç—é–º–æ–≤ –¥–ª—è —Å–¥–∞—á–∏. ü§∑‚Äç‚ôÄÔ∏è\n"
                "–°–Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—É–π—Ç–µ –∫–æ—Å—Ç—é–º –≤ —Ä–∞–∑–¥–µ–ª–µ 'üì• –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Å—Ç—é–º'.",
                reply_markup=menu
            )
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ—Å—Ç—é–º–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{costume.name} (–†–∞–∑–º–µ—Ä: {costume.size})", 
                callback_data=f"return_costume:{costume.id}"
            )] for costume in costumes
        ])

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Å—Ç—é–º, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å:",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ—Å—Ç—é–º–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
@router.callback_query(CostumeReturn.select_costume, F.data.startswith("return_costume:"))
async def process_costume_return_selection(callback: CallbackQuery, state: FSMContext, db: DataBase):
    costume_id = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ—Å—Ç—é–º–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(costume_id=costume_id)
    await state.set_state(CostumeReturn.confirm_return)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Å—Ç—é–º–µ
    async with db.async_session() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            stmt = select(Costumes).where(Costumes.id == costume_id)
            result = await session.execute(stmt)
            costume = result.scalar_one_or_none()

            if costume:
                # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_return:yes"),
                        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="confirm_return:no")
                    ]
                ])

                await callback.message.edit_text(
                    f"–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å –∫–æ—Å—Ç—é–º:\n"
                    f"üé≠ <b>{costume.name}</b>\n"
                    f"üìè –†–∞–∑–º–µ—Ä: {costume.size}\n"
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç?",
                    reply_markup=confirm_keyboard,
                    parse_mode="HTML"
                )
            else:
                menu = await get_role_menu(callback.from_user.id, db)
                await callback.message.answer(
                    "–ö–æ—Å—Ç—é–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", 
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="to_menu")]
                    ])
                )
                await state.clear()
        except Exception as e:
            print(f"Error in process_costume_return_selection: {e}")
            menu = await get_role_menu(callback.from_user.id, db)
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.",
                reply_markup=menu
            )
            await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
@router.callback_query(CostumeReturn.confirm_return, F.data.startswith("confirm_return:"))
async def process_return_confirmation(callback: CallbackQuery, state: FSMContext, db: DataBase):
    confirmation = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ—Å—Ç—é–º–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    costume_id = data.get("costume_id")

    async with db.async_session() as session:
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
            new_return_request = ReturnRequest(
                user_id=callback.from_user.id,
                costume_id=costume_id,
                status='pending'
            )
            session.add(new_return_request)

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Å—Ç—é–º–æ–≤
            stmt = update(Costumes).where(
                Costumes.id == costume_id
            ).values(
                quantity=Costumes.quantity + 1
            )
            await session.execute(stmt)

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            stmt = delete(Cart).where(
                Cart.user_id == callback.from_user.id,
                Cart.costume_id == costume_id
            )
            await session.execute(stmt)

            await session.commit()

            # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="to_menu")]
            ])

            await callback.message.edit_text(
                "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∫–æ—Å—Ç—é–º–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=menu_keyboard
            )

        except Exception as e:
            print(f"Error in return confirmation: {e}")
            await session.rollback()
            
            # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="to_menu")]
            ])

            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=menu_keyboard
            )

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
@router.callback_query(F.data == "to_menu")
async def return_to_menu(callback: CallbackQuery, db: DataBase):
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    menu = await get_role_menu(callback.from_user.id, db)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=menu
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(F.data == "to_admin_menu")
async def return_to_admin_menu(callback: CallbackQuery, db: DataBase):
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()
    
    user = await db.get(callback.from_user.id)
    if user and user.role == Role.Admin:
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
            reply_markup=admin_menu
        )
    else:
        menu = await get_role_menu(callback.from_user.id, db)
        await callback.message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", 
            reply_markup=menu
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞—è–≤–∫–∏ –Ω–∞ —Å–¥–∞—á—É" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(F.text == "üìã –ó–∞—è–≤–∫–∏ –Ω–∞ —Å–¥–∞—á—É")
async def list_return_requests(message: Message, state: FSMContext, db: DataBase):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get(message.from_user.id)
    if not user or user.role != Role.Admin:
        menu = await get_role_menu(message.from_user.id, db)
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç.",
            reply_markup=menu
        )
        return

    async with db.async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å –∂–∞–¥–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            stmt = select(ReturnRequest).where(ReturnRequest.status == 'pending').options(
                joinedload(ReturnRequest.costume),
                joinedload(ReturnRequest.user)
            )
            result = await session.execute(stmt)
            return_requests = result.scalars().all()

            if not return_requests:
                await message.answer(
                    "üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∫–æ—Å—Ç—é–º–æ–≤.",
                    reply_markup=admin_menu
                )
                await state.clear()
                return

            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞—è–≤–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"–ö–æ—Å—Ç—é–º: {request.costume.name} (–†–∞–∑–º–µ—Ä: {request.costume.size}) | –û—Ç: {request.user.full_name}", 
                    callback_data=f"return_request:{request.id}"
                )] for request in return_requests
            ] + [[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="to_admin_menu")]])

            await message.answer(
                "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç:\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
                reply_markup=keyboard
            )
            await state.set_state(ReturnRequestAdmin.list_requests)

        except Exception as e:
            print(f"Error in list_return_requests: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç.",
                reply_markup=admin_menu
            )
            await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
@router.callback_query(ReturnRequestAdmin.list_requests, F.data.startswith("return_request:"))
async def process_return_request_selection(callback: CallbackQuery, state: FSMContext, db: DataBase):
    request_id = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(request_id=request_id)
    await state.set_state(ReturnRequestAdmin.confirm_request)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    async with db.async_session() as session:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            stmt = select(ReturnRequest).where(ReturnRequest.id == request_id).options(
                joinedload(ReturnRequest.costume),
                joinedload(ReturnRequest.user)
            )
            result = await session.execute(stmt)
            return_request = result.scalar_one_or_none()

            if return_request:
                # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_return_request:yes"),
                        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="confirm_return_request:no")
                    ]
                ])

                await callback.message.edit_text(
                    f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç:\n"
                    f"üé≠ –ö–æ—Å—Ç—é–º: <b>{return_request.costume.name}</b>\n"
                    f"üìè –†–∞–∑–º–µ—Ä: {return_request.costume.size}\n"
                    f"üë§ –û—Ç: {return_request.user.full_name}\n"
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç?",
                    reply_markup=confirm_keyboard,
                    parse_mode="HTML"
                )
            else:
                menu = await get_role_menu(callback.from_user.id, db)
                await callback.message.answer(
                    "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", 
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="to_admin_menu")]
                    ])
                )
                await state.clear()
        except Exception as e:
            print(f"Error in process_return_request_selection: {e}")
            menu = await get_role_menu(callback.from_user.id, db)
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.",
                reply_markup=menu
            )
            await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞—è–≤–∫–∏
@router.callback_query(ReturnRequestAdmin.confirm_request, F.data.startswith("confirm_return_request:"))
async def process_return_request_confirmation(callback: CallbackQuery, state: FSMContext, db: DataBase):
    confirmation = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    request_id = data.get("request_id")

    async with db.async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É —Å –∂–∞–¥–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
            stmt = select(ReturnRequest).where(ReturnRequest.id == request_id).options(
                joinedload(ReturnRequest.costume),
                joinedload(ReturnRequest.user)
            )
            result = await session.execute(stmt)
            return_request = result.scalar_one_or_none()

            if not return_request:
                raise ValueError("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            if confirmation == "yes":
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Å—Ç—é–º–∞
                costume_stmt = update(Costumes).where(
                    Costumes.id == return_request.costume_id
                ).values(quantity=Costumes.quantity + 1)
                await session.execute(costume_stmt)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                return_request.status = 'approved'
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                return_request.status = 'rejected'

            await session.commit()

            # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="to_admin_menu")]
            ])

            await callback.message.edit_text(
                f"–ó–∞—è–≤–∫–∞ {'–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' if confirmation == 'yes' else '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}.\n"
                f"–ö–æ—Å—Ç—é–º: {return_request.costume.name}",
                reply_markup=menu_keyboard
            )

        except Exception as e:
            print(f"Error in return request confirmation: {e}")
            await session.rollback()
            
            # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="to_admin_menu")]
            ])

            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=menu_keyboard
            )

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –∫–æ—Å—Ç—é–º–∞" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –∫–æ—Å—Ç—é–º–∞")
async def search_costumes(message: Message, db: DataBase):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user = await db.get(message.from_user.id)
    if not user or user.role != Role.Admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    async with db.async_session() as session:
        query = select(Cart, Users, Costumes).join(Users, Cart.user_id == Users.id).join(
            Costumes, Cart.costume_id == Costumes.id
        )
        result = await session.execute(query)
        cart_items = result.all()

        if not cart_items:
            await message.answer("üéâ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –í—Å–µ –∫–æ—Å—Ç—é–º—ã —Å–≤–æ–±–æ–¥–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞—Ä–µ–Ω–¥—ã!")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–Ω—è—Ç—ã—Ö –∫–æ—Å—Ç—é–º–æ–≤
        response_text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –∫–æ—Å—Ç—é–º–æ–≤:\n\n"
        
        for cart, user, costume in cart_items:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–ª–∞–¥–µ–Ω–∏—è
            days_owned = (datetime.now() - cart.created_at).days + 1
            
            response_text += (
                f"üëî *{costume.name}*\n"
                f"üë§ –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä: {user.full_name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
                f"‚è≥ –î–Ω–µ–π –≤ –∞—Ä–µ–Ω–¥–µ: {days_owned}\n"
                f"üìÖ –î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {cart.created_at.strftime('%d.%m.%Y')}\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            )

        await message.answer(response_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—Å—Ç—é–º—ã" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.message(F.text == "üëó –ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—Å—Ç—é–º—ã")
async def rented_costumes(message: Message, db: DataBase):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user = await db.get(message.from_user.id)
    if not user or user.role != Role.Admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    async with db.async_session() as session:
        query = select(Cart, Users, Costumes).join(Users, Cart.user_id == Users.id).join(
            Costumes, Cart.costume_id == Costumes.id
        )
        result = await session.execute(query)
        cart_items = result.all()

        if not cart_items:
            await message.answer("üéâ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –í—Å–µ –∫–æ—Å—Ç—é–º—ã —Å–≤–æ–±–æ–¥–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞—Ä–µ–Ω–¥—ã!")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Å—Ç—é–º–æ–≤
        response_text = "üëó –ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—Å—Ç—é–º—ã:\n\n"
        
        for cart, user, costume in cart_items:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–ª–∞–¥–µ–Ω–∏—è
            days_owned = (datetime.now() - cart.created_at).days + 1
            
            response_text += (
                f"üëî *{costume.name}*\n"
                f"üë§ –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä: {user.full_name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
                f"‚è≥ –î–Ω–µ–π –≤ –∞—Ä–µ–Ω–¥–µ: {days_owned}\n"
                f"üìÖ –î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {cart.created_at.strftime('%d.%m.%Y')}\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            )

        await message.answer(response_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–ª–∂–Ω–∏–∫–∏" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.message(F.text == "üí∞ –î–æ–ª–∂–Ω–∏–∫–∏")
async def debtors_list(message: Message, db: DataBase):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user = await db.get(message.from_user.id)
    if not user or user.role != Role.Admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã –∫–æ—Å—Ç—é–º–æ–≤
    async with db.async_session() as session:
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ—Å—Ç—é–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã
        query = (
            select(Users, Costumes, Cart)
            .join(Cart, Users.id == Cart.user_id)
            .join(Costumes, Cart.costume_id == Costumes.id)
        )
        
        result = await session.execute(query)
        rentals = result.all()

        if not rentals:
            await message.answer("üéâ –û—Ç–ª–∏—á–Ω–æ! –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Å—Ç—é–º–æ–≤!")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ—Å—Ç—é–º—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        current_user = None
        response_text = "üë• –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Å—Ç—é–º–æ–≤:\n\n"

        for user, costume, cart in rentals:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if current_user != user.id:
                if current_user is not None:
                    response_text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                current_user = user.id
                response_text += f"üë§ *{user.full_name}*\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\nüìã –ö–æ—Å—Ç—é–º—ã:\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Å—Ç—é–º–µ
            days_owned = (datetime.now() - cart.created_at).days + 1
            response_text += (
                f"  ‚Ä¢ {costume.name}\n"
                f"    ‚è≥ –î–Ω–µ–π –≤ –∞—Ä–µ–Ω–¥–µ: {days_owned}\n"
                f"    üìÖ –ü–æ–ª—É—á–µ–Ω: {cart.created_at.strftime('%d.%m.%Y')}\n"
            )

        response_text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response_text) > 4096:
            for x in range(0, len(response_text), 4096):
                await message.answer(response_text[x:x+4096], parse_mode="Markdown")
        else:
            await message.answer(response_text, parse_mode="Markdown")
