from aiogram import Router, F
from aiogram.types import Message, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.fsm.context import FSMContext
from data.database import DataBase
from utils.states import CostumeRent
from keyboards.reply import user_menu, admin_menu, confirm_rent_kb
from uuid import uuid4
from sqlalchemy import select, or_, update
from data.models import Costumes, UserCostumes
from datetime import datetime

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Å—Ç—é–º"
@router.message(F.text == "üì• –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Å—Ç—é–º")
async def get_costume_start(message: Message, state: FSMContext):
    await state.set_state(CostumeRent.selecting)
    await message.answer(
        "–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Å—Ç—é–º–∞ –∏–ª–∏ —Ä–∞–∑–º–µ—Ä.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ø–æ:\n"
        "- –ù–∞–∑–≤–∞–Ω–∏—é –∫–æ—Å—Ç—é–º–∞\n"
        "- –†–∞–∑–º–µ—Ä—É (M, L, XL)\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.",
        reply_markup=user_menu,
        switch_inline_query_current_chat=""  # –≠—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç inline —Ä–µ–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline —Ä–µ–∂–∏–º–∞
@router.inline_query()
async def inline_search(query: InlineQuery, db: DataBase):
    search_text = query.query.lower().strip()
    results = []

    try:
        async with db.async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—Å—Ç—é–º—ã –∏–∑ –±–∞–∑—ã
            stmt = select(Costumes).where(
                Costumes.quantity > 0,
                or_(
                    Costumes.name.ilike(f"%{search_text}%"),
                    Costumes.size.ilike(f"%{search_text}%")
                )
            )
            result = await session.execute(stmt)
            costumes = result.scalars().all()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è inline —Ä–µ–∂–∏–º–∞
            for costume in costumes:
                results.append(
                    InlineQueryResultArticle(
                        id=str(costume.costume_uuid),
                        title=f"{costume.name} (–†–∞–∑–º–µ—Ä: {costume.size})",
                        description=f"–í –Ω–∞–ª–∏—á–∏–∏: {costume.quantity} —à—Ç.",
                        thumb_url=costume.image_url,
                        input_message_content=InputTextMessageContent(
                            message_text=f"COSTUME_UUID:{costume.costume_uuid}"
                        )
                    )
                )

    except Exception as e:
        print(f"Error in inline search: {e}")
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ",
                description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                input_message_content=InputTextMessageContent(
                    message_text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ—Å—Ç—é–º–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            )
        ]

    if not results:
        results = [
            InlineQueryResultArticle(
                id=str(uuid4()),
                title="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                input_message_content=InputTextMessageContent(
                    message_text="–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
                )
            )
        ]

    await query.answer(
        results=results,
        cache_time=5,
        is_personal=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ—Å—Ç—é–º–∞
@router.message(CostumeRent.selecting, F.text.startswith("COSTUME_UUID:"))
async def process_costume_selection(message: Message, state: FSMContext, db: DataBase):
    costume_uuid = message.text.split(":")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º UUID –∫–æ—Å—Ç—é–º–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(costume_uuid=costume_uuid)
    await state.set_state(CostumeRent.confirming)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Å—Ç—é–º–µ
    async with db.async_session() as session:
        stmt = select(Costumes).where(Costumes.costume_uuid == costume_uuid)
        result = await session.execute(stmt)
        costume = result.scalar_one_or_none()
        
        if costume:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å UUID
            await message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            await message.answer(
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∫–æ—Å—Ç—é–º:\n"
                f"üé≠ <b>{costume.name}</b>\n"
                f"üìè –†–∞–∑–º–µ—Ä: {costume.size}\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?",
                reply_markup=confirm_rent_kb,
                parse_mode="HTML"
            )
        else:
            await message.answer("–ö–æ—Å—Ç—é–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.", reply_markup=user_menu)
            await state.set_state(CostumeRent.selecting)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
@router.message(CostumeRent.confirming, F.text.in_(["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]))
async def process_rent_confirmation(message: Message, state: FSMContext, db: DataBase):
    if message.text == "‚ùå –ù–µ—Ç":
        await message.answer("–û–∫–µ–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤—ã–±–æ—Ä!", reply_markup=user_menu)
        await state.set_state(CostumeRent.selecting)
        return

    # –ü–æ–ª—É—á–∞–µ–º UUID –∫–æ—Å—Ç—é–º–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    costume_uuid = data.get("costume_uuid")

    async with db.async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Å—Ç—é–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            stmt = select(Costumes).where(Costumes.costume_uuid == costume_uuid)
            result = await session.execute(stmt)
            costume = result.scalar_one_or_none()

            if not costume or costume.quantity <= 0:
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –∫–æ—Å—Ç—é–º —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=user_menu)
                await state.clear()
                return

            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Å—Ç—é–º–æ–≤
            stmt = update(Costumes).where(
                Costumes.costume_uuid == costume_uuid,
                Costumes.quantity > 0
            ).values(
                quantity=Costumes.quantity - 1
            )
            await session.execute(stmt)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∞—Ä–µ–Ω–¥–µ
            new_rent = UserCostumes(
                user_id=message.from_user.id,
                costume_id=costume.id,
                rent_date=datetime.now(),
                returned=False
            )
            session.add(new_rent)
            await session.commit()

            await message.answer(
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ö–æ—Å—Ç—é–º {costume.name} —Ç–µ–ø–µ—Ä—å –≤–∞—à!\n"
                f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.",
                reply_markup=user_menu
            )

        except Exception as e:
            print(f"Error in rent confirmation: {e}")
            await session.rollback()
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=user_menu
            )

    await state.clear()
